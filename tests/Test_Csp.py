
#------------------------------------------------------------------------------#
#                Test of galapy.CompositeStellarPopulation module.
#------------------------------------------------------------------------------#

""" 
Testing the Class "CSP" which reads and operates on Simple Stellar Population 
(SSP),  properly formatted, tables. These tables can be combined into composite 
populations (CSP), driving the kernel emission processes from galaxies.

Dictionary providing available SSP-libraries .

Available SSP formats
---------------------

* bc03.basel.chab.extend;
* bc03.stelib.chab.extend;
* bc03.stelib.chab.extrap;
* parsec22.NT; (default)
* parsec22.NTL;
* parsec22.NT.refined;
* parsec22.NTL.refined;
"""

# External imports
import numpy as np
import pytest

# Internal imports
import galapy
from galapy import StarFormationHistory as CSFH
from galapy import CompositeStellarPopulation as gpcsp


@pytest.fixture
def csp ():
    
     csp = gpcsp.CSP( ssp_lib = 'bc03.basel.chab.extend' )
     return csp 

def test_csp_init ( csp ) :
    
    """ 
    Test initialization of  the class CSP 
    
    """
    
    assert isinstance( csp, galapy.CompositeStellarPopulation.CSP )

#------------------------------------------------------------------------------#

def test_csp_lib () :
    
    """ 
    Only libraries indicate above are valid choices for initialize the 
    class CSP .

    """
    
    lib = 'other_lib'
    with pytest.raises( ValueError, match = f'SSP library "{lib}" '
                        'not available; you can see the list of available '
                        'libraries by running '
                        'galapy.CompositeStellarPopulation.print_ssp_libs()' ) :
        csp = gpcsp.CSP( ssp_lib = lib )
    
#------------------------------------------------------------------------------#

def test_csp_parameters ( csp ) :
    
    """                                                      
    Only a sfh generated by galapy.StarFormationHistory.SFH class is a valid 
    choice for set the parameters of CSP class .

    """
    
    age = 1.e+7
    sfh = 1.
    
    with pytest.raises( ValueError, match = 'Argument sfh must be an instance '
                        'of either galapy.StarFormationHistory.SFH or '
                        'galapy.SFH_core.' ) :
        csp.set_parameters( age, sfh )
        
#------------------------------------------------------------------------------#

def test_csp_SSP_wavelengths ( csp ) :

    """
    Test the dimension of the wavelengths array, formatted from the binary file,
    and one of its value .
    ( This is valid only for the default ssp library ) .

    """
    
    assert len(csp.l) == 2223
    assert csp.l[1000] == 14025.
    
#------------------------------------------------------------------------------#


def test_csp_SSP_time ( csp ) :

    """
    Test the dimension of the times array, formatted from the binary file, 
    and one of its value .

    """
    assert len(csp.t) == 221
    assert csp.t[100] == 3.7e+7
    
#------------------------------------------------------------------------------#

def test_csp_SSP_metallicity ( csp ) :

    """
    Test the dimension of the metallicities array, formatted from the binary 
    file, and one of its value .

    """

    assert len(csp.Z) == 7
    assert csp.Z[3] == 0.008
    
#------------------------------------------------------------------------------#

def test_csp_SSP_luminosity ( csp ) :

    """
    Test the luminosity of a SSP of age tt and metallicity zz in a range of 
    wavelengths.

    """
    
    iz = 3      # zz = 0.008
    it = 100    # tt = 3.e+7
    Lssp=[ csp.SSP( il, it, iz ) for il in range ( 0, len(csp.l), 500 ) ]
    assert np.all ( Lssp == pytest.approx( [ 0.0, 0.0027065, 0.00030026,
                                            5.6041e-06, 3.631e-07 ] ) )
    
#------------------------------------------------------------------------------#

def test_csp_emission ( csp ) :
    
    """                                                    
    Test the emission at a certain wavelength ll at different CSP-ages and with 
    a specific SFH (In-Situ model, default one) .
    
    """
    
    # ll = 14025.0 amstrong 
    ages = [ 1.e+7, 1.e+8, 1.e+9 ]
    sfh = CSFH.SFH( )
    il = 1000               # ll wavelength index
    Lcsp = [ csp.emission( age, sfh ) for age in ages ]
    Lcsp_ll = [ Lcsp[ i ][ il ] for i in range( 0, len ( ages ) ) ]
    assert np.all ( Lcsp_ll == pytest.approx( [ 8086.216432373749,
                                                429313.0040422565,
                                                3535865.880163872] ) )
    
    
